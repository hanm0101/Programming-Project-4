import javafx.application.Application;
import javafx.event.ActionEvent;
import javafx.event.EventHandler;
import javafx.scene.Scene;
import javafx.geometry.Insets;
import javafx.scene.control.Button;
import javafx.scene.control.Label;
import javafx.scene.layout.GridPane;
import javafx.stage.Stage;
import javafx.scene.Parent;
import javafx.fxml.*;
import javafx.fxml.FXMLLoader;
import java.net.URL;
import javafx.scene.layout.*;
import javafx.scene.control.ScrollPane;
import javafx.scene.control.ChoiceBox;
import javafx.beans.value.ChangeListener;
import javafx.beans.value.ObservableValue;
import javafx.scene.control.ButtonType;
import java.util.Optional;
import javafx.scene.control.Alert;
import javafx.scene.control.Alert.AlertType;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Set;
import javafx.scene.Node;
import javafx.collections.*;
/**
 * Write a description of class StatViewer here.
 *
 * @author (your name)
 * @version (a version number or a date)
 */
public class StatGUIController
{
    // instance variables - replace the example below with your own
    
    private static Integer min;
    private static Integer max;
    private Integer to;
    private Integer from;
    private boolean valid = false;
    private Alert alert = new Alert(AlertType.ERROR, "The values selected are invalid !");
    private ArrayList<String> allStats = new ArrayList<>();
    private ArrayList<String> unusedArray = new ArrayList<>();
    private Stats stats = new Stats();
    @FXML
    private GridPane gridPane;
    @FXML
    private Label upperLeftLabel;
    @FXML
    private Label upperRightLabel;
    @FXML
    private Label lowerLeftLabel;
    @FXML
    private Label lowerRightLabel;
    @FXML
    private ChoiceBox<Integer> toCB= new ChoiceBox<>();
    @FXML
    private ChoiceBox<Integer> fromCB= new ChoiceBox<>();

    public void initialize(){
        
        createArrayKeys();
        upperLeftLabel = new Label(allStats.get(0));
        upperRightLabel= new Label(allStats.get(1));
        lowerLeftLabel= new Label(allStats.get(2));
        lowerRightLabel= new Label(allStats.get(3));
        addValuesTo();
        addValuesFrom();

        ObservableList<Node> gridChildren = gridPane.getChildren();

        // skip first two elements cos they belong to row 0
        for (int i=2; i< gridChildren.size(); i++){
            BorderPane statBox = (BorderPane) gridChildren.get(i);

            ObservableList <Node> statBoxElements = statBox.getChildren();
            
            Label statLabel = (Label) statBoxElements.get(0);

            Button leftB = (Button) statBoxElements.get(0);
            //leftB.setOnAction(EventHandler<ActionEvent>
                  //stats.getStats().getStatName() = extract statlabel info
                  // push statlabel info to the right of unused AL
                  // statlabel = extract leftmost label
            //);
            //leftB.setOnAction(EventHandler<ActionEvent>
                  // 8statinfo = extract statlabel info
                  // push statlabel info to the left of unused AL
                  // statlabel = extract rightmost label
            //);
        }
    }
    
    
    private void createArrayKeys(){
        stats.getStats().keySet();
        Set<String> keys = stats.getStats().keySet();
        for (String key : keys) {
            allStats.add(key);
        }
    }
    
    public Node getNodeByRowColumnIndex (final int row, final int column, GridPane gridPane) {
        Node result = null;
        ObservableList<Node> children = gridPane.getChildren();

        for (Node node : children) {
            if(gridPane.getRowIndex(node) == row && gridPane.getColumnIndex(node) == column) {
                result = node;
                break;
            }
        }

        return result;
    }
    
    @FXML
    private void addValuesTo(){
        toCB.getItems().addAll(0, 100, 250, 500, 1000, 2000, 3000, 4000, 5000, 6000);
    }

    @FXML
    private void addValuesFrom(){
        fromCB.getItems().addAll(0, 100, 250, 500, 1000, 2000, 3000, 4000, 5000, 6000);
    }
    
    private void changeLabel(){
        
    }
    
    private void listenTo(){
        //Listens to changes to the "to" dropBox selected value.
        toCB.getSelectionModel().selectedIndexProperty().addListener(new
            ChangeListener<Number>(){
                public void changed(ObservableValue ov, Number value, Number new_value){
                    to = toCB.getItems().get((Integer) new_value);
                    if(to !=null && from !=null && from > to){
                        Optional<ButtonType> result = alert.showAndWait();
                        valid = false;
                    }
                    else if(to !=null && from !=null) valid = true;
                }
            }  );
    }

    /**
     * An example of a method - replace this comment with your own
     *
     * @param  y  a sample parameter for a method
     * @return    the sum of x and y
     */
    public static void setToValue(int to)
    {
        max = to;
    }

    /**
     * An example of a method - replace this comment with your own
     *
     * @param  y  a sample parameter for a method
     * @return    the sum of x and y
     */
    public static void setFromValue(int from)
    {
        min = from;
    }
}
