import java.util.*;

/**
 * Generates a list of recommended properties by analysing the user's data on the following fields:
 * borough, price, room type and number of days available
 * Each property designated a score. Scores are multiplied when they meet certain criteria based on these chosen fields.
 * The top ten properties with the highest scores at the end of the filtering process are recommended 
 * @author Faith Ann Ong
 * @version 27.3.19
 */
public class Recommendations
{
    private AirbnbDataLoader loader;
    //stores all the properties mapped to their score
    private HashMap<AirbnbListing, Double> shortlist;
    //to retrieve favourited boroughs and properties
    private DataAccount dataAccount;
    //to retrieve most viewed boroughs and properties
    private StatData statData; 
    private SortingAlgorithms sorter;
    
    //all the data required to sort the recommended properties 
    private List<AirbnbListing> favoriteProperties;
    private AirbnbListing mostViewedProperty;
    private String favoriteBorough;
    private String mostViewedBorough;
    //all the price ranges searched by the user (not using the search bar)
    private List<Integer[]> searchedPriceRanges;
    
    //the user's details intialised to default values
    private static String username = "Ariane"; 
    private static boolean loggedIn = true;
    
    //String constants to represent room types
    private final String PRIVATE_ROOM = "Private room"; 
    private final String ENTIRE_HOME = "Entire home/apt";
    private final String SHARED_ROOM = "Shared room";
     
public Recommendations(){
    dataAccount = new DataAccount();
    statData = new StatData();
    shortlist = new HashMap<>();
    loader = new AirbnbDataLoader();
    sorter = new SortingAlgorithms();
    
    //retrieve data required to sort recommended properties
    mostViewedBorough = statData.getMostViewedB();
    favoriteBorough = dataAccount.userFavoriteBor(username);
    
    mostViewedProperty = statData.getMostViewedP();
    favoriteProperties = dataAccount.userFavoriteProps(username);
    
    searchedPriceRanges = dataAccount.getPriceRange(username);
    //WHAT IF THE FAVOURITE/ MOST VIEWED PROPERTIES/ BOROUGHS ARE 
    //UPDATED WHILE IN THIS WINDOW -> REFRESH BUTTON? OR CHANGE DYNAMICALLY?
}

/**
 * Chooses the top ten properties with the highest scores to recommend to the user 
 * @returns List<AirbnbListing> 10 recommended properties for the user
 */
public List<AirbnbListing> getRecommendations(){
    //sort shortlist by highest score to lowest score
    List sortedShortlist = sorter.sortDoubleDesc(shortlist.entrySet());
    List<AirbnbListing> finalRecommendations = new ArrayList<>();
    //only display the recommendations with the top 10 highest scores
    for(int i = 0; i<10; i++){
        AirbnbListing chosen = (AirbnbListing) sortedShortlist.get(i);
        //add to list of final recommendations
        finalRecommendations.add(chosen);
        //System.out.println(chosen.getName() + ", "+chosen.getNeighbourhood() + ", "+chosen.getPrice() + " "+chosen.getRoom_type()
        //+chosen.getAvailability365());
    }
    
    //REMOVE LATEER
    // for(AirbnbListing chosen : finalRecommendations){
        // System.out.println(chosen.getName() + ", "+chosen.getNeighbourhood() + ", "+chosen.getPrice() + " "+chosen.getRoom_type()
        // +chosen.getAvailability365());
    // }
    
    return finalRecommendations;
}

/**
 * give scores to all Airbnb properties based on certain criteria on their borough, price, days available and room type 
 * 
 */
private void scoreProperties(){
    //get all properties in the airbnb database
    List<AirbnbListing> allListings = loader.load();
    for(AirbnbListing listing : allListings){
        shortlist.put(listing, 1.0);
        //System.out.println(listing.getName() + shortlist.get(listing));
    }
    //remove favourites and most viewed - user already aware of them, so they don't need to be recommended
    for(AirbnbListing fave : favoriteProperties){
        shortlist.remove(fave);
    }
    shortlist.remove(mostViewedProperty);
    
    boroughScore(); 
    priceRangeScore();
    roomTypeScore();
    availabilityScore();
    //testing
    for(int i=0; i<10; i++){
        AirbnbListing l =sorter.sortDoubleDesc(shortlist.entrySet()).get(i);
        System.out.println(l.getName() + shortlist.get(l));
    }
}

/**
 * If a property's borough matches that of the favourite or most viewed borough, their scores will be multiplied
 * by 1.7 and 1.6 respectively
 */
private void boroughScore(){
    
    for(AirbnbListing property : shortlist.keySet()){
        String borough = property.getNeighbourhood();
        //if borough is the favourite borough, multiply score
        if(favoriteBorough !=null){
            if(borough.equals(favoriteBorough)){
                shortlist.put(property, shortlist.get(property)*1.7);
            }
        }
        //if borough matches most viewed, multiply score
        if(borough.equals(mostViewedBorough)){
            shortlist.put(property, shortlist.get(property)*1.6);
        }
        //ADD SEARCH
         // List<String> adjacentBoroughs = findAdjacentBoroughs();
        // if(adjacentBoroughs !=null){
            // for(String adjacent : adjacentBoroughs){
                // if(borough.equals(adjacent)){
                    // shortlist.put(property, shortlist.get(property)*0.3);
                // }
            // }
        // }
    }
    
    //TESTING
    // for(AirbnbListing property : shortlist.keySet()){
        // if(property.getNeighbourhood().equals(favoriteBorough))
        // System.out.println(property.getNeighbourhood()+ shortlist.get(property));
        // if(property.getNeighbourhood().equals(mostViewedBorough))
        // System.out.println(property.getNeighbourhood()+ shortlist.get(property));
    // }
     System.out.println("fave borough" +favoriteBorough);
    System.out.println("most viewed borough" +mostViewedBorough);
}
    
// private List<String> findAdjacentBoroughs(){
    
// }
/**
 * If a property's price falls in the average price range calculated, then the property's 
 * score will be multiplied by 1.6
 */
private void priceRangeScore(){
    int[] range = getRecPriceRange();
    int lbAvg = range[0];
    int ubAvg = range[1];
    //if a property in shortlist has a price within this averaged price
    //range, multiply its score
    for(AirbnbListing property : shortlist.keySet()){
        int price = property.getPrice();
        if(lbAvg<= price && price <= ubAvg){
            shortlist.replace(property, shortlist.get(property)*1.6);
        }
    }
}

/**
 * attempts to find the user's preferred price range using the user's previous price range searches (not using the search bar)
 * Method: find the average lower and upper bounds from the searches. Calculate and return the range between these 
 * calculated bounds.
 * @returns int[] recommended price range int[0] is the lower bound, int[1] is the upper bound
 */
private int[] getRecPriceRange(){
     List<Integer[]> priceRanges = dataAccount.getPriceRange(username);
    //add up all the lower bounds and upper bounds respectively
    int lbAvg = 0;
    int ubAvg = 0;
    for(Integer[] range : priceRanges){
        lbAvg += range[0];
        ubAvg += range[1];
    }
    //now find the average lower bound and upper bound
    lbAvg = lbAvg/priceRanges.size();
    ubAvg = ubAvg/priceRanges.size();
    int[] range = {lbAvg, ubAvg};
    System.out.println("price range: "+lbAvg +" to "+ubAvg);
    return range;
}
    
/**
 * Ranks the room types according to their frequency among favourited and most viewed properties
 * Program infers that the highest ranked room type is the most popular 
 * @returns List<String> of the room types listed in order of their rank i.e. First rank is listed first. 
 */
private List<String> getRoomTypePopularityRanking(){
    int privateCounter = 0;
    int sharedCounter = 0;
    int entireCounter = 0;
    //check the room types of the favourite properties
    if(favoriteProperties != null){
        for(AirbnbListing listing : favoriteProperties){
            String roomType = listing.getRoom_type();
            switch(roomType){
                case PRIVATE_ROOM : privateCounter+=3;
                break;
                case SHARED_ROOM : sharedCounter+=3;
                break;
                case ENTIRE_HOME : entireCounter +=3;
                break;
            }
        }
    }
    //get the most viewed room type for most viewed property
    String mvRoomType = mostViewedProperty.getRoom_type();
    switch(mvRoomType){
        case PRIVATE_ROOM : privateCounter+=2;
        break;
        case SHARED_ROOM : sharedCounter+=2;
        break;
        case ENTIRE_HOME : entireCounter +=2;
        break;
    }
    
    HashMap<String, Integer> hm = new HashMap<>();
    hm.put("private", privateCounter);
    hm.put("shared", sharedCounter);
    hm.put("entire", entireCounter);
    //sorted in descending order
    List<String> sortedList = new ArrayList<>();
    hm.entrySet().stream().sorted(Collections.reverseOrder(Map.Entry.comparingByValue()))
    .forEach(e -> sortedList.add(e.getKey()));
    
    System.out.println("room type");
    for(int i=0; i<sortedList.size();i++){
        System.out.print(sortedList.get(i));
    }
    return sortedList;
}
    
/**
 * Properties of the first ranked room type have their scores multiplied by 1.5
 * Properties of increasingly lower ranked room types have their scores multiplied by increasing lower values
 * i.e. rank 2 -> score*1.33, rank 3 -> score*1.25
 */
private void roomTypeScore(){
    List<String> rtRanking = getRoomTypePopularityRanking();  
    double[] scoreMultipliers = new double[getRoomTypePopularityRanking().size()];
    //the most popular room type (rank1 / index 0) gets the highest multiplier score
    for(int i=0; i<scoreMultipliers.length; i++){
        scoreMultipliers[i] = (1+1/(i+2));
    }
    
    //multiply scores
    for(AirbnbListing listing : shortlist.keySet()){
        String roomtype = listing.getRoom_type();
        for(int i = 0; i<rtRanking.size(); i++){
            if(roomtype.equals(rtRanking.get(i))){
                //multiply property's score according to the popularity ranking of its room type
                shortlist.replace(listing, shortlist.get(listing)*scoreMultipliers[i]);
            }
        }
    }
}

/**
 * all properties in the calculated preferred range have their scores multiplied by 1.5
 */
private void availabilityScore(){
    int[] range = getDesiredAvailabilityRange();
    //multiply scores of properties with availabilities in the middle range
    for(AirbnbListing listing : shortlist.keySet()){
        int availability = listing.getAvailability365();
        if(availability>= range[0] && availability<= range[1]){
            shortlist.replace(listing, shortlist.get(listing)*1.5);
        }
    }
}

/**
 * predicts the range of number of available days that the user prefers
 * Method: gets all the availabilities of the favourited and most viewed properties, sorts them into ascending order.
 * The calculated range is the represented by the middle 30% of the initial range.
 * e.g. if initial range is from 0 to 100, calculated range is 35 to 65
 * @returns int[] predicted prefered range of number of available days of a property. int[0] and int[1] is lower and upper bound
 * respectively 
 */
private int[] getDesiredAvailabilityRange(){
    ArrayList<Integer> availabilities = new ArrayList<>();
    //get an arraylist of all the availibity data from favorite properties and most viewed property
    if(favoriteProperties!=null){ 
        for(AirbnbListing fave : favoriteProperties){
            availabilities.add(fave.getAvailability365());
        }
    }
    availabilities.add(mostViewedProperty.getAvailability365());
    //get the range represented by the middle 30%
    int[] av = new int[availabilities.size()];
    for(int i=0; i<availabilities.size(); i++){
        av[i] = availabilities.get(i);
    }
    //sort available days in ascending order
    Arrays.sort(av);
    double lowestAv = av[0];
    double highestAv = av[av.length -1];
    double range = highestAv - lowestAv;
    double median = (highestAv + lowestAv)/2;
    double hundredth = range/10;
    //size of range in which number of available days should lie
    double desiredRangePerc = 0.3;
    double lowerbound = median - (hundredth* desiredRangePerc/2);
    double upperbound = median + (hundredth* desiredRangePerc/2);
    int[] desiredRange = {(int)lowerbound, (int)upperbound};
    
    System.out.println("availability range: "+desiredRange[0]+ " to "+desiredRange[1]);
    return desiredRange;
}

/**
 * sets the username of the user
 * @param Username username of the user
 */
public static void setUserName(String Username){
    username = Username;
}

/**
 * sets whether the user is logged in or not
 * @param isLoggedIn true if logged in, else false.
 */
public static void setLoggedIn(boolean isLoggedIn){
    loggedIn = isLoggedIn;
}
}
